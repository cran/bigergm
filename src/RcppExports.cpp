// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// eigenvectors_sparse
arma::mat eigenvectors_sparse(const arma::sp_mat& X, int n_vec);
RcppExport SEXP _bigergm_eigenvectors_sparse(SEXP XSEXP, SEXP n_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_vec(n_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenvectors_sparse(X, n_vec));
    return rcpp_result_gen;
END_RCPP
}
// yule
double yule(const arma::vec& z_star, const arma::vec& z);
RcppExport SEXP _bigergm_yule(SEXP z_starSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z_star(z_starSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(yule(z_star, z));
    return rcpp_result_gen;
END_RCPP
}
// decimal_to_binary_vector
arma::vec decimal_to_binary_vector(int decimal, int vec_length);
RcppExport SEXP _bigergm_decimal_to_binary_vector(SEXP decimalSEXP, SEXP vec_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type decimal(decimalSEXP);
    Rcpp::traits::input_parameter< int >::type vec_length(vec_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_to_binary_vector(decimal, vec_length));
    return rcpp_result_gen;
END_RCPP
}
// compute_sumTaus
arma::mat compute_sumTaus(int numOfVertices, int numOfClasses, const arma::mat& tau, int verbose);
RcppExport SEXP _bigergm_compute_sumTaus(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_sumTaus(numOfVertices, numOfClasses, tau, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_quadratic_term_naive
arma::mat compute_quadratic_term_naive(int numOfVertices, int numOfClasses, const arma::mat& pi, const arma::mat& tau, const arma::sp_mat& network);
RcppExport SEXP _bigergm_compute_quadratic_term_naive(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP piSEXP, SEXP tauSEXP, SEXP networkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type network(networkSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_quadratic_term_naive(numOfVertices, numOfClasses, pi, tau, network));
    return rcpp_result_gen;
END_RCPP
}
// compute_linear_term
arma::mat compute_linear_term(int numOfVertices, int numOfClasses, const arma::vec& alpha, const arma::mat& tau, double& LB);
RcppExport SEXP _bigergm_compute_linear_term(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP alphaSEXP, SEXP tauSEXP, SEXP LBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double& >::type LB(LBSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_linear_term(numOfVertices, numOfClasses, alpha, tau, LB));
    return rcpp_result_gen;
END_RCPP
}
// compute_pi
arma::mat compute_pi(int numOfVertices, int numOfClasses, const arma::sp_mat& stat, const arma::mat& tau);
RcppExport SEXP _bigergm_compute_pi(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP statSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type stat(statSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pi(numOfVertices, numOfClasses, stat, tau));
    return rcpp_result_gen;
END_RCPP
}
// compute_quadratic_term
arma::mat compute_quadratic_term(int numOfVertices, int numOfClasses, const arma::vec& alpha, const arma::mat& tau, const arma::sp_mat& network, double& LB, int verbose);
RcppExport SEXP _bigergm_compute_quadratic_term(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP alphaSEXP, SEXP tauSEXP, SEXP networkSEXP, SEXP LBSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type network(networkSEXP);
    Rcpp::traits::input_parameter< double& >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_quadratic_term(numOfVertices, numOfClasses, alpha, tau, network, LB, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_quadratic_term_directed
arma::mat compute_quadratic_term_directed(int numOfVertices, int numOfClasses, const arma::vec& alpha, const arma::mat& tau, const arma::sp_mat& network, double& LB, int verbose);
RcppExport SEXP _bigergm_compute_quadratic_term_directed(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP alphaSEXP, SEXP tauSEXP, SEXP networkSEXP, SEXP LBSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type network(networkSEXP);
    Rcpp::traits::input_parameter< double& >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_quadratic_term_directed(numOfVertices, numOfClasses, alpha, tau, network, LB, verbose));
    return rcpp_result_gen;
END_RCPP
}
// run_MM_without_features
Rcpp::List run_MM_without_features(int numOfVertices, int numOfClasses, const arma::vec& alpha, arma::mat& tau, const arma::sp_mat& network, int verbose, bool directed);
RcppExport SEXP _bigergm_run_MM_without_features(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP alphaSEXP, SEXP tauSEXP, SEXP networkSEXP, SEXP verboseSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(run_MM_without_features(numOfVertices, numOfClasses, alpha, tau, network, verbose, directed));
    return rcpp_result_gen;
END_RCPP
}
// compute_denominator_for_pi_d1x0
arma::mat compute_denominator_for_pi_d1x0(int numOfVertices, double numOfClasses, const arma::sp_mat& matrix_for_denominator, const arma::mat& tau, int verbose);
RcppExport SEXP _bigergm_compute_denominator_for_pi_d1x0(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP matrix_for_denominatorSEXP, SEXP tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< double >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type matrix_for_denominator(matrix_for_denominatorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_denominator_for_pi_d1x0(numOfVertices, numOfClasses, matrix_for_denominator, tau, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_pi_d1x0
arma::mat compute_pi_d1x0(int numOfVertices, int numOfClasses, const Rcpp::List& list_multiplied_feature_adjmat, const arma::mat& tau, int verbose);
RcppExport SEXP _bigergm_compute_pi_d1x0(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP list_multiplied_feature_adjmatSEXP, SEXP tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_multiplied_feature_adjmat(list_multiplied_feature_adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pi_d1x0(numOfVertices, numOfClasses, list_multiplied_feature_adjmat, tau, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_quadratic_term_with_features
arma::mat compute_quadratic_term_with_features(int numOfVertices, int numOfClasses, const Rcpp::List& list_multiplied_feature_adjmat, const arma::mat& tau, double& LB, int verbose);
RcppExport SEXP _bigergm_compute_quadratic_term_with_features(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP list_multiplied_feature_adjmatSEXP, SEXP tauSEXP, SEXP LBSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_multiplied_feature_adjmat(list_multiplied_feature_adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double& >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_quadratic_term_with_features(numOfVertices, numOfClasses, list_multiplied_feature_adjmat, tau, LB, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_quadratic_term_with_features_directed
arma::mat compute_quadratic_term_with_features_directed(int numOfVertices, int numOfClasses, const Rcpp::List& list_multiplied_feature_adjmat, const arma::mat& tau, double& LB, int verbose);
RcppExport SEXP _bigergm_compute_quadratic_term_with_features_directed(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP list_multiplied_feature_adjmatSEXP, SEXP tauSEXP, SEXP LBSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_multiplied_feature_adjmat(list_multiplied_feature_adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double& >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_quadratic_term_with_features_directed(numOfVertices, numOfClasses, list_multiplied_feature_adjmat, tau, LB, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_pi_with_features
Rcpp::List compute_pi_with_features(int numOfVertices, int numOfClasses, const Rcpp::List& list_multiplied_feature_adjmat, const arma::mat& tau);
RcppExport SEXP _bigergm_compute_pi_with_features(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP list_multiplied_feature_adjmatSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_multiplied_feature_adjmat(list_multiplied_feature_adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pi_with_features(numOfVertices, numOfClasses, list_multiplied_feature_adjmat, tau));
    return rcpp_result_gen;
END_RCPP
}
// run_MM_with_features
Rcpp::List run_MM_with_features(int numOfVertices, int numOfClasses, const arma::vec& alpha, const Rcpp::List& list_multiplied_feature_adjmat, arma::mat& tau, int verbose, bool directed);
RcppExport SEXP _bigergm_run_MM_with_features(SEXP numOfVerticesSEXP, SEXP numOfClassesSEXP, SEXP alphaSEXP, SEXP list_multiplied_feature_adjmatSEXP, SEXP tauSEXP, SEXP verboseSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< int >::type numOfClasses(numOfClassesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_multiplied_feature_adjmat(list_multiplied_feature_adjmatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(run_MM_with_features(numOfVertices, numOfClasses, alpha, list_multiplied_feature_adjmat, tau, verbose, directed));
    return rcpp_result_gen;
END_RCPP
}
// simulate_between_network
arma::sp_mat simulate_between_network(int numOfVertices, const Rcpp::List& list_feature_adjmat, const arma::vec& coef_between, const arma::vec& block_membership, bool directed, int& seed);
RcppExport SEXP _bigergm_simulate_between_network(SEXP numOfVerticesSEXP, SEXP list_feature_adjmatSEXP, SEXP coef_betweenSEXP, SEXP block_membershipSEXP, SEXP directedSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_feature_adjmat(list_feature_adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type coef_between(coef_betweenSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type block_membership(block_membershipSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_between_network(numOfVertices, list_feature_adjmat, coef_between, block_membership, directed, seed));
    return rcpp_result_gen;
END_RCPP
}
// simulate_between_network_covariates
arma::sp_mat simulate_between_network_covariates(const int numOfVertices, const Rcpp::List& coef_between, const Rcpp::List& list_feature_adjmat, const arma::vec& block_membership, bool directed, int& seed);
RcppExport SEXP _bigergm_simulate_between_network_covariates(SEXP numOfVerticesSEXP, SEXP coef_betweenSEXP, SEXP list_feature_adjmatSEXP, SEXP block_membershipSEXP, SEXP directedSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type coef_between(coef_betweenSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type list_feature_adjmat(list_feature_adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type block_membership(block_membershipSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_between_network_covariates(numOfVertices, coef_between, list_feature_adjmat, block_membership, directed, seed));
    return rcpp_result_gen;
END_RCPP
}
// simulate_between_network_no_covariates
arma::sp_mat simulate_between_network_no_covariates(const int numOfVertices, const arma::sp_mat& coef_between, const arma::vec& block_membership, bool directed, int& seed);
RcppExport SEXP _bigergm_simulate_between_network_no_covariates(SEXP numOfVerticesSEXP, SEXP coef_betweenSEXP, SEXP block_membershipSEXP, SEXP directedSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type numOfVertices(numOfVerticesSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type coef_between(coef_betweenSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type block_membership(block_membershipSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_between_network_no_covariates(numOfVertices, coef_between, block_membership, directed, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bigergm_eigenvectors_sparse", (DL_FUNC) &_bigergm_eigenvectors_sparse, 2},
    {"_bigergm_yule", (DL_FUNC) &_bigergm_yule, 2},
    {"_bigergm_decimal_to_binary_vector", (DL_FUNC) &_bigergm_decimal_to_binary_vector, 2},
    {"_bigergm_compute_sumTaus", (DL_FUNC) &_bigergm_compute_sumTaus, 4},
    {"_bigergm_compute_quadratic_term_naive", (DL_FUNC) &_bigergm_compute_quadratic_term_naive, 5},
    {"_bigergm_compute_linear_term", (DL_FUNC) &_bigergm_compute_linear_term, 5},
    {"_bigergm_compute_pi", (DL_FUNC) &_bigergm_compute_pi, 4},
    {"_bigergm_compute_quadratic_term", (DL_FUNC) &_bigergm_compute_quadratic_term, 7},
    {"_bigergm_compute_quadratic_term_directed", (DL_FUNC) &_bigergm_compute_quadratic_term_directed, 7},
    {"_bigergm_run_MM_without_features", (DL_FUNC) &_bigergm_run_MM_without_features, 7},
    {"_bigergm_compute_denominator_for_pi_d1x0", (DL_FUNC) &_bigergm_compute_denominator_for_pi_d1x0, 5},
    {"_bigergm_compute_pi_d1x0", (DL_FUNC) &_bigergm_compute_pi_d1x0, 5},
    {"_bigergm_compute_quadratic_term_with_features", (DL_FUNC) &_bigergm_compute_quadratic_term_with_features, 6},
    {"_bigergm_compute_quadratic_term_with_features_directed", (DL_FUNC) &_bigergm_compute_quadratic_term_with_features_directed, 6},
    {"_bigergm_compute_pi_with_features", (DL_FUNC) &_bigergm_compute_pi_with_features, 4},
    {"_bigergm_run_MM_with_features", (DL_FUNC) &_bigergm_run_MM_with_features, 7},
    {"_bigergm_simulate_between_network", (DL_FUNC) &_bigergm_simulate_between_network, 6},
    {"_bigergm_simulate_between_network_covariates", (DL_FUNC) &_bigergm_simulate_between_network_covariates, 6},
    {"_bigergm_simulate_between_network_no_covariates", (DL_FUNC) &_bigergm_simulate_between_network_no_covariates, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_bigergm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
